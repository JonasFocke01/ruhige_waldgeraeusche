import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        placeholder?: string | undefined;
        label?: string | undefined;
        required?: boolean | undefined;
        value?: string | undefined;
        paddingleft?: boolean | undefined;
        disabled?: boolean | undefined;
        maxLength?: number | undefined;
        showDisabledIcon?: boolean | undefined;
        focusThis?: (() => void) | undefined;
    };
    events: {
        change: Event;
        input: Event;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type TextfieldProps = typeof __propDef.props;
export declare type TextfieldEvents = typeof __propDef.events;
export declare type TextfieldSlots = typeof __propDef.slots;
/**
 * a basic textinput field
 *
 * **label**
 * * string
 * * default: 'Label'
 * * sets the label of the field
 *
 * **value**
 * * string
 * * default: ''
 * * represents the value of the field
 *
 * **placeholder**
 * * string
 * * default: 'Placeholder'
 * * sets the placeholder for the field
 *
 * **required**
 * * boolean
 * * default: false
 * * if true, the field is required
 *
 * **paddingleft**
 * * boolean
 * * default: false
 * * if true, pl-10 is applyed to the inputtext
 *
 * **disabled**
 * * boolean
 * * default: false
 * * if true, the field is disabled/readonly
 *
 * **let:warnUser**
 * * boolean
 * * slot
 * * if true, the user is to be warned. Only works if required is true.
 *
 * **slot**
 * * HTML
 * * default: no default
 * * adds the content above the input field and disposes a boolean if the user is to be warned.
 *
 * **on:change**
 * * function
 * * default: () => {}
 * * triggered when the value of the field changes.
 *
 * **on:input**
 * * function
 * * default: () => {}
 * * triggered when the user inputs something.
 *
 * **method: focusThis**
 * * function
 * * focuses and selects everything in the input field.
 *
 * **showDisabledIcon**
 * * boolean
 * * default: false
 * * if true, the disabled icon will be displayed, if the field is disabled
 */
export default class Textfield extends SvelteComponentTyped<TextfieldProps, TextfieldEvents, TextfieldSlots> {
    get focusThis(): () => void;
}
export {};
