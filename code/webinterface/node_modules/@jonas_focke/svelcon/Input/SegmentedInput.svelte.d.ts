import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        label?: string | undefined;
        value?: string | undefined;
        segmentCount: number;
        disabled?: boolean | undefined;
        showDisabledIcon?: boolean | undefined;
    };
    events: {
        input: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type SegmentedInputProps = typeof __propDef.props;
export declare type SegmentedInputEvents = typeof __propDef.events;
export declare type SegmentedInputSlots = typeof __propDef.slots;
/**
 * An input field but segmented for each digit
 *
 * **label**
 * * string
 * * default: ''
 * * sets the label of the field
 *
 * **value**
 * * string
 * * default: ''
 * * represents the value of the field
 *
 * **segmentCount**
 * * number
 * * default: !NO DEFAULT!
 * * sets the number of segments which in turn are the number of inputable digits
 *
 * **disabled**
 * * boolean
 * * default: false
 * * sets the field to disabled/readonly
 *
 * **showDisabledIcon**
 * * boolean
 * * default: false
 * * shows a disabled icon if the field is disabled
 */
export default class SegmentedInput extends SvelteComponentTyped<SegmentedInputProps, SegmentedInputEvents, SegmentedInputSlots> {
    get label(): string | undefined;
    /**accessor*/
    set label(_: string | undefined);
    get value(): string | undefined;
    /**accessor*/
    set value(_: string | undefined);
    get segmentCount(): number;
    /**accessor*/
    set segmentCount(_: number);
    get disabled(): boolean | undefined;
    /**accessor*/
    set disabled(_: boolean | undefined);
    get showDisabledIcon(): boolean | undefined;
    /**accessor*/
    set showDisabledIcon(_: boolean | undefined);
}
export {};
