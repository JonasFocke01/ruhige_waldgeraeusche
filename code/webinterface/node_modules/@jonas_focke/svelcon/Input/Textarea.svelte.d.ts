import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        placeholder?: string | undefined;
        label?: string | undefined;
        required?: boolean | undefined;
        value?: string | undefined;
        disabled?: boolean | undefined;
        showDisabledIcon?: boolean | undefined;
    };
    events: {
        change: Event;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            warnUser: boolean;
        };
    };
};
export declare type TextareaProps = typeof __propDef.props;
export declare type TextareaEvents = typeof __propDef.events;
export declare type TextareaSlots = typeof __propDef.slots;
/**
 * a basic textinput field
 *
 * **label**
 * * string
 * * default: 'Label'
 * * sets the label of the field
 *
 * **value**
 * * string
 * * default: ''
 * * represents the value of the field
 *
 * **placeholder**
 * * string
 * * default: 'Placeholder'
 * * sets the placeholder for the field
 *
 * **required**
 * * boolean
 * * default: false
 * * if true, the field is required
 *
 * **disabled**
 * * boolean
 * * default: false
 * * if true, the field is disabled/readonly
 *
 * **let:warnUser**
 * * boolean
 * * slot
 * * if true, the user is to be warned. Only works if required is true.
 *
 * **slot**
 * * HTML
 * * default: no default
 * * adds the content above the input field and disposes a boolean if the user is to be warned.
 *
 * **showDisabledIcon**
 * * boolean
 * * default: false
 * * if true, the disabled icon will be displayed, if the field is disabled
 */
export default class Textarea extends SvelteComponentTyped<TextareaProps, TextareaEvents, TextareaSlots> {
}
export {};
