import { SvelteComponentTyped } from "svelte";
/**
 * Each exported Item is an object with the following properties:
 */
export interface Item {
    text: string;
    value: string;
    selected: boolean;
}
declare const __propDef: {
    props: {
        text?: string | undefined;
        showCheckbox?: boolean | undefined;
        inputItemsString?: string[] | undefined;
        inputItemsKeyValue?: {
            text: string;
            value: string;
        }[] | undefined;
        itemlistToBind?: Item[] | undefined;
        selectable?: boolean | undefined;
        multiselect?: boolean | undefined;
        filterable?: boolean | undefined;
        button?: boolean | undefined;
        buttontext?: string | undefined;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type ListProps = typeof __propDef.props;
export declare type ListEvents = typeof __propDef.events;
export declare type ListSlots = typeof __propDef.slots;
/**
 * Displays a list of items that can be selected if wanted
 *
 * How to use: You can create an Item array in the parent component and pass it directly,
 * but you can also pass an string array or an key value object array and it will be automatically converted
 * to an Item array
 *
 * **text**
 * * string
 * * default: ''
 * * the headline of the component
 *
 * **inputItemsString**
 * * Array<string>
 * * default !No default!
 * * an array of strings that will be converted to an Item array
 * * note: only pass this, but DO NOT BIND TO IT!
 *
 * **inputItemsKeyValue**
 * * Array<{text: string, value: string}>
 * * default !No default!
 * * an array of key value objects that will be converted to an Item array
 * * note: only pass this, but DO NOT BIND TO IT!
 *
 * **itemListToBind**
 * * Array<Item>
 * * default: []
 * * the exported itemarray
 * * BIND THIS!
 *
 * **selectable**
 * * boolean
 * * default: false
 * * if true, the items can be selected
 *
 * **multiselect**
 * * boolean
 * * default: false
 * * if true, multiple items can be selected
 *
 * **showCheckbox**
 * * boolean
 * * default: false
 * * if true, displays a checkbox for every item
 *
 * **filterable**
 * * boolean
 * * default: false
 * * if true, a filterbox will appear
 *
 * **button**
 * * boolean
 * * default: false
 * * if true, a button is displayed below the list
 *
 * **buttonText**
 * * string
 * * default: 'Button'
 * * the text of the button
 *
 * **on:buttonClicked**
 * * function
 * * default: () => {}
 * * the function to be called when the button is clicked
 */
export default class List extends SvelteComponentTyped<ListProps, ListEvents, ListSlots> {
}
export {};
