import { SvelteComponentTyped } from "svelte";
export declare type ExplainColumns = Array<ExplainColumn>;
export declare type showButtons = Array<showButton>;
interface ExplainColumn {
    id?: string;
    key: string;
    heading: string;
    sortable?: boolean;
    nextSortOrder?: 'asc' | 'desc';
}
interface showButton {
    headline: string;
    text: string;
    onClick: (rowData: Object) => void;
}
declare const __propDef: {
    props: {
        filterable?: boolean | undefined;
        headline?: string | undefined;
        displayRowButtons?: showButtons | undefined;
        data: Array<any>;
        explainColumns: ExplainColumns;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type TableProps = typeof __propDef.props;
export declare type TableEvents = typeof __propDef.events;
export declare type TableSlots = typeof __propDef.slots;
/**
 * Displays a table of items that can be selected if wanted
 *
 * How to use: You can hand this component any array of objects for the rows, but you have to specify the shown columns in an second array.
 *
 * **data**
 * * Array<Object: any>
 * * default !No default!
 * * the rowdata of the table
 *
 * **explainColumns**
 * * Array<ExplainColumn>
 * * default !No default!
 * * an explanation for the columns of the table
 * * here you can say, wich and how columns are shown
 *
 * **headline**
 * * string
 * * default ''
 * * the headline of the headline of the component
 *
 * **displayRowButtons**
 * * Array<{headline: string, text: string, onClick: Function(rowData: Object)}>
 * * default []
 * * if not empty, buttons are displayed for each row
 *
 * **filterable**
 * * boolean
 * * default false
 * * if true, a filterbox will appear
 */
export default class Table extends SvelteComponentTyped<TableProps, TableEvents, TableSlots> {
}
export {};
