import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  add_render_callback,
  append_hydration_dev,
  attr_dev,
  check_outros,
  children,
  claim_element,
  claim_space,
  claim_text,
  create_in_transition,
  destroy_each,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  group_outros,
  init,
  insert_hydration_dev,
  noop,
  onMount,
  safe_not_equal,
  set_data_dev,
  space,
  text,
  toggle_class,
  transition_in,
  transition_out,
  validate_each_argument,
  validate_slots
} from "./chunk-4NZVM4V3.js";

// node_modules/@jonas_focke/svelcon/Wrapper/Text.svelte
var file = "node_modules/@jonas_focke/svelcon/Wrapper/Text.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  child_ctx[13] = i;
  return child_ctx;
}
function create_if_block(ctx) {
  let previous_key = (
    /*words*/
    ctx[3]
  );
  let key_block_anchor;
  let key_block = create_key_block(ctx);
  const block = {
    c: function create() {
      key_block.c();
      key_block_anchor = empty();
    },
    l: function claim(nodes) {
      key_block.l(nodes);
      key_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      key_block.m(target, anchor);
      insert_hydration_dev(target, key_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*words*/
      8 && safe_not_equal(previous_key, previous_key = /*words*/
      ctx2[3])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: function intro(local) {
      transition_in(key_block);
    },
    o: function outro(local) {
      transition_out(key_block);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(key_block_anchor);
      key_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(170:0) {#if animate}",
    ctx
  });
  return block;
}
function create_each_block(ctx) {
  let p;
  let t0_value = (
    /*word*/
    ctx[11].word + ""
  );
  let t0;
  let t1;
  let p_class_value;
  let p_intro;
  const block = {
    c: function create() {
      p = element("p");
      t0 = text(t0_value);
      t1 = space();
      this.h();
    },
    l: function claim(nodes) {
      p = claim_element(nodes, "P", { class: true });
      var p_nodes = children(p);
      t0 = claim_text(p_nodes, t0_value);
      t1 = claim_space(p_nodes);
      p_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(p, "class", p_class_value = "text-" + /*size*/
      ctx[1]);
      toggle_class(
        p,
        "italic",
        /*word*/
        ctx[11].italic
      );
      toggle_class(
        p,
        "line-through",
        /*word*/
        ctx[11].strikeThrough
      );
      toggle_class(
        p,
        "font-bold",
        /*word*/
        ctx[11].bold
      );
      toggle_class(
        p,
        "underline",
        /*word*/
        ctx[11].underline
      );
      add_location(p, file, 193, 10, 5587);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, p, anchor);
      append_hydration_dev(p, t0);
      append_hydration_dev(p, t1);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*displayWords*/
      16 && t0_value !== (t0_value = /*word*/
      ctx2[11].word + ""))
        set_data_dev(t0, t0_value);
      if (dirty & /*size*/
      2 && p_class_value !== (p_class_value = "text-" + /*size*/
      ctx2[1])) {
        attr_dev(p, "class", p_class_value);
      }
      if (dirty & /*size, displayWords*/
      18) {
        toggle_class(
          p,
          "italic",
          /*word*/
          ctx2[11].italic
        );
      }
      if (dirty & /*size, displayWords*/
      18) {
        toggle_class(
          p,
          "line-through",
          /*word*/
          ctx2[11].strikeThrough
        );
      }
      if (dirty & /*size, displayWords*/
      18) {
        toggle_class(
          p,
          "font-bold",
          /*word*/
          ctx2[11].bold
        );
      }
      if (dirty & /*size, displayWords*/
      18) {
        toggle_class(
          p,
          "underline",
          /*word*/
          ctx2[11].underline
        );
      }
    },
    i: function intro(local) {
      if (!p_intro) {
        add_render_callback(() => {
          p_intro = create_in_transition(
            p,
            /*typewriterLetters*/
            ctx[7],
            {}
          );
          p_intro.start();
        });
      }
    },
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(p);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(193:8) {#each displayWords as word, i}",
    ctx
  });
  return block;
}
function create_key_block(ctx) {
  let div1;
  let div0;
  let div1_name_value;
  let div1_intro;
  let each_value = (
    /*displayWords*/
    ctx[4]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { name: true, class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div0_nodes);
      }
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", "flex flex-row flex-wrap");
      add_location(div0, file, 191, 6, 5498);
      attr_dev(div1, "name", div1_name_value = /*text*/
      ctx[0].replaceAll("#", "").replaceAll("*", "").replaceAll("_", "").replaceAll("-", "").replaceAll(" ", ""));
      attr_dev(div1, "class", "text-text");
      toggle_class(
        div1,
        "text-text",
        /*textColor*/
        ctx[2] === "text"
      );
      toggle_class(
        div1,
        "text-error",
        /*textColor*/
        ctx[2] === "error"
      );
      toggle_class(
        div1,
        "text-success",
        /*textColor*/
        ctx[2] === "success"
      );
      toggle_class(
        div1,
        "text-warning",
        /*textColor*/
        ctx[2] === "warning"
      );
      toggle_class(
        div1,
        "text-info",
        /*textColor*/
        ctx[2] === "info"
      );
      toggle_class(
        div1,
        "text-primary",
        /*textColor*/
        ctx[2] === "primary"
      );
      toggle_class(
        div1,
        "text-secondary",
        /*textColor*/
        ctx[2] === "secondary"
      );
      toggle_class(
        div1,
        "text-accent",
        /*textColor*/
        ctx[2] === "accent"
      );
      toggle_class(
        div1,
        "text-surface",
        /*textColor*/
        ctx[2] === "surface"
      );
      toggle_class(
        div1,
        "text-black",
        /*textColor*/
        ctx[2] === "black"
      );
      add_location(div1, file, 171, 4, 4777);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div0, null);
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*size, displayWords*/
      18) {
        each_value = /*displayWords*/
        ctx2[4];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*text*/
      1 && div1_name_value !== (div1_name_value = /*text*/
      ctx2[0].replaceAll("#", "").replaceAll("*", "").replaceAll("_", "").replaceAll("-", "").replaceAll(" ", ""))) {
        attr_dev(div1, "name", div1_name_value);
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-text",
          /*textColor*/
          ctx2[2] === "text"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-error",
          /*textColor*/
          ctx2[2] === "error"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-success",
          /*textColor*/
          ctx2[2] === "success"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-warning",
          /*textColor*/
          ctx2[2] === "warning"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-info",
          /*textColor*/
          ctx2[2] === "info"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-primary",
          /*textColor*/
          ctx2[2] === "primary"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-secondary",
          /*textColor*/
          ctx2[2] === "secondary"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-accent",
          /*textColor*/
          ctx2[2] === "accent"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-surface",
          /*textColor*/
          ctx2[2] === "surface"
        );
      }
      if (dirty & /*textColor*/
      4) {
        toggle_class(
          div1,
          "text-black",
          /*textColor*/
          ctx2[2] === "black"
        );
      }
    },
    i: function intro(local) {
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      if (!div1_intro) {
        add_render_callback(() => {
          div1_intro = create_in_transition(
            div1,
            /*typewriterWords*/
            ctx[6],
            {}
          );
          div1_intro.start();
        });
      }
    },
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_key_block.name,
    type: "key",
    source: "(171:2) {#key words}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let if_block_anchor;
  let if_block = (
    /*animate*/
    ctx[5] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, [dirty]) {
      if (/*animate*/
      ctx2[5]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*animate*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: function intro(local) {
      transition_in(if_block);
    },
    o: noop,
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Text", slots, []);
  let { text: text2 = "-This- *is* _a_ #test#!!" } = $$props;
  let { size = "base" } = $$props;
  let { textColor = "text" } = $$props;
  let { typewriterSpeed = 0 } = $$props;
  let tokenStack = [];
  let letters = [];
  let words = [];
  let displayWords = [];
  let animate = false;
  onMount(() => {
    $$invalidate(5, animate = true);
  });
  function typewriterWords(node, {}) {
    if (typewriterSpeed > 0) {
      const children2 = Array.from(node.children[0].children);
      const duration = children2.length / (typewriterSpeed * 0.01);
      return {
        duration,
        tick: (t) => {
          const howMuchWordsToDisplay = Math.floor(children2.length * t);
          $$invalidate(4, displayWords = words.slice(0, howMuchWordsToDisplay));
        }
      };
    } else {
      const duration = 0;
      return {
        duration,
        tick: () => {
        }
      };
    }
  }
  function typewriterLetters(node, {}) {
    if (typewriterSpeed > 0) {
      const text3 = node.textContent;
      const duration = text3.length / (typewriterSpeed * 0.1);
      return {
        duration,
        tick: (t) => {
          const i = text3.length * t;
          node.textContent = text3.slice(0, i);
        }
      };
    } else {
      const duration = 0;
      return {
        duration,
        tick: () => {
        }
      };
    }
  }
  const writable_props = ["text", "size", "textColor", "typewriterSpeed"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Text> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text2 = $$props2.text);
    if ("size" in $$props2)
      $$invalidate(1, size = $$props2.size);
    if ("textColor" in $$props2)
      $$invalidate(2, textColor = $$props2.textColor);
    if ("typewriterSpeed" in $$props2)
      $$invalidate(8, typewriterSpeed = $$props2.typewriterSpeed);
  };
  $$self.$capture_state = () => ({
    onMount,
    text: text2,
    size,
    textColor,
    typewriterSpeed,
    tokenStack,
    letters,
    words,
    displayWords,
    animate,
    typewriterWords,
    typewriterLetters
  });
  $$self.$inject_state = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text2 = $$props2.text);
    if ("size" in $$props2)
      $$invalidate(1, size = $$props2.size);
    if ("textColor" in $$props2)
      $$invalidate(2, textColor = $$props2.textColor);
    if ("typewriterSpeed" in $$props2)
      $$invalidate(8, typewriterSpeed = $$props2.typewriterSpeed);
    if ("tokenStack" in $$props2)
      $$invalidate(9, tokenStack = $$props2.tokenStack);
    if ("letters" in $$props2)
      $$invalidate(10, letters = $$props2.letters);
    if ("words" in $$props2)
      $$invalidate(3, words = $$props2.words);
    if ("displayWords" in $$props2)
      $$invalidate(4, displayWords = $$props2.displayWords);
    if ("animate" in $$props2)
      $$invalidate(5, animate = $$props2.animate);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*text, tokenStack, letters, words*/
    1545) {
      $: {
        if (text2) {
          $$invalidate(9, tokenStack = []);
          $$invalidate(10, letters = []);
          $$invalidate(3, words = []);
          let nextBold = false;
          let nextItalic = false;
          let nextStrikeThrough = false;
          let nextUnderline = false;
          let word = "";
          let ignore = false;
          $$invalidate(9, tokenStack = text2.split(""));
          for (let i = 0; i < tokenStack.length; i++) {
            if (!ignore && tokenStack[i] === "!") {
              ignore = true;
            } else if (!ignore && tokenStack[i] === "*") {
              nextBold = !nextBold;
            } else if (!ignore && tokenStack[i] === "_") {
              nextUnderline = !nextUnderline;
            } else if (!ignore && tokenStack[i] === "-") {
              nextStrikeThrough = !nextStrikeThrough;
            } else if (!ignore && tokenStack[i] === "#") {
              nextItalic = !nextItalic;
            } else {
              letters.push({
                letter: tokenStack[i],
                bold: nextBold,
                italic: nextItalic,
                strikeThrough: nextStrikeThrough,
                underline: nextUnderline
              });
              ignore = false;
            }
          }
          $$invalidate(10, letters = letters.map((letter) => letter.letter === " " ? {
            letter: " ",
            bold: letter.bold,
            italic: letter.italic,
            strikeThrough: letter.strikeThrough,
            underline: letter.underline
          } : letter));
          $$invalidate(10, letters = [
            ...letters,
            {
              letter: " ",
              bold: false,
              italic: false,
              strikeThrough: false,
              underline: false
            }
          ]);
          for (let i = 0; i < letters.length; i++) {
            if (letters[i].letter === " ") {
              if (word.length > 0) {
                words.push({
                  word: word + " ",
                  bold: letters[i - 1].bold,
                  italic: letters[i - 1].italic,
                  strikeThrough: letters[i - 1].strikeThrough,
                  underline: letters[i - 1].underline
                });
                word = "";
              }
            } else {
              word += letters[i].letter;
            }
          }
          $$invalidate(4, displayWords = words);
          $$invalidate(3, words), $$invalidate(0, text2), $$invalidate(9, tokenStack), $$invalidate(10, letters), $$invalidate(11, word);
        }
      }
    }
  };
  return [
    text2,
    size,
    textColor,
    words,
    displayWords,
    animate,
    typewriterWords,
    typewriterLetters,
    typewriterSpeed,
    tokenStack,
    letters
  ];
}
var Text = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      text: 0,
      size: 1,
      textColor: 2,
      typewriterSpeed: 8
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Text",
      options,
      id: create_fragment.name
    });
  }
  get text() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get size() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set size(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get textColor() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set textColor(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get typewriterSpeed() {
    throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set typewriterSpeed(value) {
    throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Text_default = Text;
export {
  Text_default as default
};
//# sourceMappingURL=@jonas_focke_svelcon_Wrapper_Text__svelte.js.map
